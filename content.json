{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Zhang hao","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2020-03-21T15:32:35.000Z","updated":"2020-03-22T09:41:48.412Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"后端","date":"2020-03-21T15:35:03.000Z","updated":"2020-03-21T15:35:03.415Z","comments":true,"path":"后端/index.html","permalink":"http://yoursite.com/%E5%90%8E%E7%AB%AF/index.html","excerpt":"","text":""},{"title":"Nginx","date":"2020-03-22T09:23:13.000Z","updated":"2020-03-22T09:25:46.157Z","comments":true,"path":"Nginx/index.html","permalink":"http://yoursite.com/Nginx/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo添加标签、分类、发布到git","slug":"Hexo添加标签、分类、发布到git","date":"2020-03-22T10:08:03.000Z","updated":"2020-03-22T10:20:51.065Z","comments":true,"path":"2020/03/22/Hexo添加标签、分类、发布到git/","link":"","permalink":"http://yoursite.com/2020/03/22/Hexo%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB%E3%80%81%E5%8F%91%E5%B8%83%E5%88%B0git/","excerpt":"","text":"1.创建标签1$ hexo new page tags 编辑index添加type: tags 12345---title: 标签date: 2019-04-24 15:40:24type: tags--- 2.给文章添加标签 编辑文章添加内容 12345---title: Hexo 添加分类及标签date: 2019-04-24 15:40:24tags:[Nginx]--- 3.创建分类1$ hexo new page categories 编辑index添加type: “categories” 12345---title: 分类date: 2019-04-24 15:30:30type: categories--- 4.给文章添加分类12345---title: Hexo 添加分类及标签date: 2017-05-26 12:12:57categories: Hexo--- 5.Hexo Admin后台插件12npm install --save hexo-adminhexo server -d(开启hexo操作) 打开http://IP:4000/admin 就可以进入控制台 posts 新建博客 pages 页面 deploy 将更新的博客发布到github6.提交到git 编辑根目录下_config.yml1234deploy: type: git repo: git@github.com:自己的名称&#x2F;自己的名称.github.io.git branch: master 12hexo g 这一步是生成静态页面hexo d 这个是部署到git上","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}]},{"title":"Docker 部署 Nginx","slug":"Docker-部署-Nginx","date":"2020-03-22T08:08:20.000Z","updated":"2020-03-22T09:43:55.782Z","comments":true,"path":"2020/03/22/Docker-部署-Nginx/","link":"","permalink":"http://yoursite.com/2020/03/22/Docker-%E9%83%A8%E7%BD%B2-Nginx/","excerpt":"","text":"1.安装Nginx镜像1docker pull nginx 2.创建nginx.conf配置文件1234567891011121314151617181920212223242526272829303132333435363738394041worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application&#x2F;octet-stream; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; # Vue路由模式为history需添加的配置 location &#x2F; &#123; if (!-e $request_filename) &#123; rewrite ^(.*)$ &#x2F;index.html?s&#x3D;$1 last; break; &#125; root &#x2F;home&#x2F;nginx&#x2F;www; index index.html; &#125; # 获取真实IP以及Websocket需添加的配置 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; # 客户端Body大小限制（文件上传大小限制配置） client_max_body_size 5m; error_page 500 502 503 504 404 &#x2F;50x.html; location &#x3D; &#x2F;50x.html &#123; root html; &#125; &#125;&#125; 3.创建Nginx容器1234docker run -it -d --name nginx -p 81:80 \\-v &#x2F;home&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \\-v &#x2F;home&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \\-v &#x2F;home&#x2F;nginx&#x2F;www:&#x2F;home&#x2F;nginx&#x2F;www nginx /home/nginx/conf/nginx.conf 为刚才创建配置文件的路径 /home/nginx/logs 日志保存的位置 /home/nginx/www 跳转静态资源位置 4.其他命令 docker ps | grep nginx 查看nginx容器运行状态 docker start mynginx 启动 docker start mynginx 重启 docker stop mynginx 暂停 docker rm mynginx 移除","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}],"keywords":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}]},{"title":"Nginx 配置详解","slug":"Nginx-简介","date":"2020-03-22T07:40:54.000Z","updated":"2020-03-22T09:44:52.524Z","comments":true,"path":"2020/03/22/Nginx-简介/","link":"","permalink":"http://yoursite.com/2020/03/22/Nginx-%E7%AE%80%E4%BB%8B/","excerpt":"","text":"1.配置概览123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#user nobody;worker_processes 1;#error_log logs&#x2F;error.log;#error_log logs&#x2F;error.log notice;#error_log logs&#x2F;error.log info;#pid logs&#x2F;nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application&#x2F;octet-stream; #log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; # &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; # &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; #access_log logs&#x2F;access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs&#x2F;host.access.log main; location &#x2F; &#123; root html; index index.html index.htm; &#125; #error_page 404 &#x2F;404.html; # redirect server error pages to the static page &#x2F;50x.html # error_page 500 502 503 504 &#x2F;50x.html; location &#x3D; &#x2F;50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http:&#x2F;&#x2F;127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME &#x2F;scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&#39;s document root # concurs with nginx&#39;s one # #location ~ &#x2F;\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location &#x2F; &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location &#x2F; &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; 2.全局快&ensp;&ensp;&ensp;&ensp;从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。 1worker_processes 1; &ensp;&ensp;&ensp;&ensp;这是 Nginx 服务器并发处理服务的关键配置,worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。 3.events块123events &#123; worker_connections 1024;&#125; &ensp;&ensp;&ensp;&ensp;events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。&ensp;&ensp;&ensp;&ensp;上述例子就表示每个 work process 支持的最大连接数为 1024.&ensp;&ensp;&ensp;&ensp;这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。 4.http块12345678910111213http &#123; include mime.types; default_type application&#x2F;octet-stream; sendfile on; server &#123; listen 80; server_name localhost; location &#x2F; &#123; root html; index index.html index.htm; &#125; &#125;&#125; &ensp;&ensp;&ensp;&ensp;这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。&ensp;&ensp;&ensp;&ensp;需要注意的是：http 块也可以包括 http 全局块、server 块。 4.1 http全局快&ensp;&ensp;&ensp;&ensp;http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。 4.2 server块&ensp;&ensp;&ensp;&ensp;这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。 4.2.1全局server块&ensp;&ensp;&ensp;&ensp;最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。 4.2.2 location块&ensp;&ensp;&ensp;&ensp;一个 server 块可以配置多个 location 块。&ensp;&ensp;&ensp;&ensp;这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}],"keywords":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}]}]}