{"meta":{"title":"张白告的个人博客","subtitle":"","description":"","author":"Zhang hao","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2020-03-21T15:32:35.000Z","updated":"2020-03-22T09:41:48.412Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Nginx","date":"2020-03-22T09:23:13.000Z","updated":"2020-03-22T09:25:46.157Z","comments":true,"path":"Nginx/index.html","permalink":"http://yoursite.com/Nginx/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker openjdk:8-jre-alpine FontConfiguration报NullPointerException","slug":"Docker-openjdk-8-jre-alpine-FontConfiguration报NullPointerException","date":"2020-03-25T13:10:38.000Z","updated":"2020-03-25T13:22:04.164Z","comments":true,"path":"2020/03/25/Docker-openjdk-8-jre-alpine-FontConfiguration报NullPointerException/","link":"","permalink":"http://yoursite.com/2020/03/25/Docker-openjdk-8-jre-alpine-FontConfiguration%E6%8A%A5NullPointerException/","excerpt":"","text":"1.异常触发情况 本地使用Java8 生成验证码图片传给前端，本地调试没任何问题，但是部署到测试该接口就会报如下错误，而本地与测试唯一不同的就是，测试时使用Docker并且基础镜像是openjdk:8-jre-alpine，最后通过查阅资料了解到是Alpine缺少字体相关的包导致的 git上也有相关的issue：https://github.com/docker-library/openjdk/issues/73123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121ERROR 1 --- [ XNIO-2 task-5] c.o.t.controller.ExceptionController : java.lang.NullPointerException at sun.awt.FontConfiguration.getVersion(FontConfiguration.java:1264) at sun.awt.FontConfiguration.readFontConfigFile(FontConfiguration.java:219) at sun.awt.FontConfiguration.init(FontConfiguration.java:107) at sun.awt.X11FontManager.createFontConfiguration(X11FontManager.java:774) at sun.font.SunFontManager$2.run(SunFontManager.java:431) at java.security.AccessController.doPrivileged(Native Method) at sun.font.SunFontManager.&lt;init&gt;(SunFontManager.java:376) at sun.awt.FcFontManager.&lt;init&gt;(FcFontManager.java:35) at sun.awt.X11FontManager.&lt;init&gt;(X11FontManager.java:57) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at java.lang.Class.newInstance(Class.java:442) at sun.font.FontManagerFactory$1.run(FontManagerFactory.java:83) at java.security.AccessController.doPrivileged(Native Method) at sun.font.FontManagerFactory.getInstance(FontManagerFactory.java:74) at java.awt.Font.getFont2D(Font.java:491) at java.awt.Font.access$000(Font.java:224) at java.awt.Font$FontAccessImpl.getFont2D(Font.java:228) at sun.font.FontUtilities.getFont2D(FontUtilities.java:180) at sun.java2d.SunGraphics2D.checkFontInfo(SunGraphics2D.java:670) at sun.java2d.SunGraphics2D.getFontInfo(SunGraphics2D.java:831) at sun.java2d.pipe.GlyphListPipe.drawString(GlyphListPipe.java:50) at sun.java2d.SunGraphics2D.drawString(SunGraphics2D.java:2926) at com.oczhkj.train.util.ImgValidateCodeUtil.drawString(ImgValidateCodeUtil.java:92) at com.oczhkj.train.util.ImgValidateCodeUtil.getImgCodeBaseCode(ImgValidateCodeUtil.java:119) at com.oczhkj.train.service.impl.UserServiceImpl.getRandomCode(UserServiceImpl.java:112) at com.oczhkj.train.service.impl.UserServiceImpl$$FastClassBySpringCGLIB$$8b28c57b.invoke(&lt;generated&gt;) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684) at com.oczhkj.train.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$76a80bc6.getRandomCode(&lt;generated&gt;) at com.oczhkj.train.controller.UserController.getCode(UserController.java:45) at com.oczhkj.train.controller.UserController$$FastClassBySpringCGLIB$$c8905613.invoke(&lt;generated&gt;) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88) at com.oczhkj.train.aop.WebLogAspect.doAround(WebLogAspect.java:49) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688) at com.oczhkj.train.controller.UserController$$EnhancerBySpringCGLIB$$d355a0b7.getCode(&lt;generated&gt;) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866) at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:64) at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132) at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292) at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81) at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138) at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135) at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272) at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81) at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104) at io.undertow.server.Connectors.executeRootHandler(Connectors.java:336) at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 2.解决方案 在基础镜像里面安装ttf-dejavu，然后就可以了 1234567FROM java:8-jre-alpine# Install cURLRUN echo -e &quot;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.4&#x2F;main\\n\\https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.4&#x2F;community&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositoriesRUN apk --update add curl bash ttf-dejavu &amp;&amp; \\ rm -rf &#x2F;var&#x2F;cache&#x2F;apk&#x2F;* 1docker build -t docker.io&#x2F;java-font:8-jre-alpine . 最后构建我们自己项目的时候以此镜像为基础镜像即可","categories":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}],"keywords":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/categories/Docker/"}]},{"title":"Docker部署Prometheus+grafana","slug":"Docker部署Prometheus-grafana","date":"2020-03-23T13:22:34.000Z","updated":"2020-03-24T03:57:21.046Z","comments":true,"path":"2020/03/23/Docker部署Prometheus-grafana/","link":"","permalink":"http://yoursite.com/2020/03/23/Docker%E9%83%A8%E7%BD%B2Prometheus-grafana/","excerpt":"","text":"1.新增prometheus.yml配置文件 job可以通过file_sd_configs方式挂载，也可以通过static_configs配置 12345678910111213141516171819202122global: scrape_interval: 15s scrape_timeout: 10s evaluation_interval: 1m external_labels: monitor: codelab-monitorscrape_configs:- job_name: prometheus honor_timestamps: true scrape_interval: 5s scrape_timeout: 5s metrics_path: &#x2F;metrics scheme: http static_configs: - targets: [&#39;192.168.237.6:9090&#39;]- job_name: &#39;node&#39; file_sd_configs: - files: [&#39;&#x2F;etc&#x2F;prometheus&#x2F;sd_config&#x2F;node.yml&#39;] refresh_interval: 5s- job_name: &#39;docker&#39; static_configs: - targets: [&#39;192.168.237.6:8080&#39;] file_sd_configs配置文件的格式 12targets: - 192.168.237.6:9100 2.exporter插件 cAdvisor：用于收集正在运行的容器资源使用和性能信息。 git地址：https://github.com/google/cadvisor 12345678910111213#!&#x2F;usr&#x2F;bin&#x2F;bashdocker stop cadvisordocker rm cadvisordocker run \\ --volume&#x3D;&#x2F;:&#x2F;rootfs:ro \\ --volume&#x3D;&#x2F;var&#x2F;run:&#x2F;var&#x2F;run:ro \\ --volume&#x3D;&#x2F;sys:&#x2F;sys:ro \\ --volume&#x3D;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;:&#x2F;var&#x2F;lib&#x2F;docker:ro \\ --volume&#x3D;&#x2F;dev&#x2F;disk&#x2F;:&#x2F;dev&#x2F;disk:ro \\ --publish&#x3D;8080:8080 \\ --detach&#x3D;true \\ --name&#x3D;cadvisor \\ google&#x2F;cadvisor node_exporter：用于Linux系统监控，使用Go语言编写的收集器。 官方文档：https://prometheus.io/docs/guides/node-exporter/ 1234567#!&#x2F;usr&#x2F;bin&#x2F;bashdocker stop node-exporterdocker rm node-exporterdocker run -d --name node-exporter -p 9100:9100 -v &quot;&#x2F;proc:&#x2F;host&#x2F;proc:ro&quot; -v &quot;&#x2F;sys:&#x2F;host&#x2F;sys:ro&quot; -v &quot;&#x2F;:&#x2F;rootfs:ro&quot; --restart&#x3D;always --net&#x3D;&quot;host&quot; prom&#x2F;node-exporter \\--path.procfs &#x2F;host&#x2F;proc \\--path.sysfs &#x2F;host&#x2F;sys \\--collector.filesystem.ignored-mount-points &quot;^&#x2F;(sys|proc|dev|host|etc)($|&#x2F;)&quot; 其他exporter:https://prometheus.io/docs/instrumenting/exporters/ 官方支持：https://prometheus.io/download/ 根据自己需求自行选择 3.Docker prometheus脚本 官方地址：https://prometheus.io/docs/prometheus/latest/installation/1234#!&#x2F;usr&#x2F;bin&#x2F;bashdocker stop prometheusdocker rm prometheusdocker run -d -p 9090:9090 --name prometheus -v &#x2F;volume&#x2F;prometheus&#x2F;prometheus.yml:&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml -v &#x2F;volume&#x2F;prometheus&#x2F;sd_config:&#x2F;etc&#x2F;prometheus&#x2F;sd_config prom&#x2F;prometheus 4.踩坑说明 若运行成功访问prometheus提示： Warning! Detected 545380.02 seconds time difference between your browser and the server. Prometheus relies on accurate time and time drift might cause unexpected query results. 则表示linux时间和本地机器时间不一致，更新linux时间即可123456789yum install -y ntpdatentpdate 0.asia.pool.ntp.org其他可选地址:ime.nist.govtime.nuri.net0.asia.pool.ntp.org1.asia.pool.ntp.org2.asia.pool.ntp.org3.asia.pool.ntp.org 5.效果 运行成功则会看到我们监控的节点 6.运行Grafana 官方地址：https://grafana.com/grafana/download?platform=docker 访问默认账户密码admin/admin，首次访问会要求修改密码1docker run -d --name&#x3D;grafana -p 3000:3000 grafana&#x2F;grafana 7.添加Prometheus 数据源 * 选择Prometheus，填写正确的服务地址 8.添加监控页面 Grafana提供了许多别人开发好的可视化界面，我们可以直接拿来使用 地址：https://grafana.com/grafana/dashboards 如监控linux我使用的是9276，cAdvisor使用的是193，这个数字是主题的id，在导入界面直接输入对应的id即可 9.最终界面展示 至此我们的Prometheus+grafana监控就完成了，运行效果如下，当然Prometheus还支持Alertmanager告警，以及k8s监控，后面会继续整理","categories":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://yoursite.com/categories/Prometheus/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Prometheus","slug":"Prometheus","permalink":"http://yoursite.com/tags/Prometheus/"},{"name":"Grafana","slug":"Grafana","permalink":"http://yoursite.com/tags/Grafana/"}],"keywords":[{"name":"Prometheus","slug":"Prometheus","permalink":"http://yoursite.com/categories/Prometheus/"}]},{"title":"Mysql 多表联合更新、select into、select update","slug":"Mysql-多表联、select into、select update合更新","date":"2020-03-23T12:58:19.000Z","updated":"2020-03-23T13:12:04.843Z","comments":true,"path":"2020/03/23/Mysql-多表联、select into、select update合更新/","link":"","permalink":"http://yoursite.com/2020/03/23/Mysql-%E5%A4%9A%E8%A1%A8%E8%81%94%E3%80%81select%20into%E3%80%81select%20update%E5%90%88%E6%9B%B4%E6%96%B0/","excerpt":"","text":"多表联合更新123UPDATE table1 a , table2 b SET a.x&#x3D;&#39;&#39;,b.x&#x3D;&#39;&#39; WHERE a.xx &#x3D; b.xxUPDATE table1 a JOIN table2 b ON a.x &#x3D; b.x SET a.xx&#x3D;&#39;&#39;,b.xx&#x3D;&#39;&#39;,a.xxx&#x3D;b.xxx select into1INSERT INTO table2 (column_name(s)) SELECT column_name(s) FROM table1; select update1update A inner join(select id,name from B) c on A.id &#x3D; c.id set A.name &#x3D; c.name;","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"}],"keywords":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/categories/Mysql/"}]},{"title":"Nginx 配置反向代理、负载均衡","slug":"Nginx-配置反向代理、负载均衡","date":"2020-03-22T14:15:01.000Z","updated":"2020-03-22T14:47:05.118Z","comments":true,"path":"2020/03/22/Nginx-配置反向代理、负载均衡/","link":"","permalink":"http://yoursite.com/2020/03/22/Nginx-%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/","excerpt":"","text":"1.反向代理配置 在nginx.conf配置server块添加proxy_pass属性指定代理的地址 location / 支持正则匹配eg:location ~ /edu/ 匹配包含edu的请求123456789server &#123; listen 80; server_name localhost; location &#x2F; &#123; proxy_pass http:&#x2F;&#x2F;url:port; index index.html index.htm index.jsp; &#125; &#125; 参数说明： listen：该指令用于配置网络监听，有如下配置方式1234listen *:80 | *:8080 #监听所有80端口和8080端口listen IP_address:port #监听指定的地址和端口号listen IP_address #监听指定ip地址所有端口listen port #监听该端口的所有IP连接 server_name：用于配置基于名称的虚拟主机，有如下配置方式123server_name www.zhangbaigao.com 精确匹配,可以配置多个用空格隔开server_name *.zhangbaigao.com; *通配符匹配server_name ~^(?.+)\\.zhangbaigao\\.com$; 正则匹配. location：该指令用于URL匹配 12345678location [ &#x3D; | ~ | ~* | ^~] uri &#123;&#125;&#x3D; ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。~：用于表示 uri 包含正则表达式，并且区分大小写。~*：用于表示 uri 包含正则表达式，并且不区分大小写。^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。 proxy_pass:设置被代理服务器的地址 index:网站的默认首页,可以写多个用空格隔开 2.负载均衡配置 在nginx.conf配置中添加与server同级的upstream配置,同时配置location：1234567891011upstream zhangbgaigao &#123; ip_hash; server 127.0.0.1:8081 weight&#x3D;1; server 127.0.0.1:8082 weight&#x3D;1;&#125;server&#123; location &#x2F; &#123; proxy_pass http:&#x2F;&#x2F;zhangbgaigao; proxy_connect_timeout 10; &#125;&#125; 负载均衡策略 轮询(默认):请求按时间逐一分配到不同的服务器，如果服务器down机了，自动剔除 weight权重:默认为1，权重越高被分配的请求越多 ip_hash:每个请求按ip的hash结果分配，同一个ip固定分配到一个服务器，可以解决session问题 fair(第三方):按后端服务器的响应 时间来分配请求，响应时间短的优先分配","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}],"keywords":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}]},{"title":"Hexo添加标签、分类、发布到git","slug":"Hexo添加标签、分类、发布到git","date":"2020-03-22T10:08:03.000Z","updated":"2020-03-22T10:31:20.176Z","comments":true,"path":"2020/03/22/Hexo添加标签、分类、发布到git/","link":"","permalink":"http://yoursite.com/2020/03/22/Hexo%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB%E3%80%81%E5%8F%91%E5%B8%83%E5%88%B0git/","excerpt":"","text":"1.创建标签1$ hexo new page tags 编辑index添加type: tags 12345---title: 标签date: 2019-04-24 15:40:24type: tags--- 2.给文章添加标签 编辑文章添加内容 12345---title: Hexo 添加分类及标签date: 2019-04-24 15:40:24tags:[Nginx]--- 3.创建分类1$ hexo new page categories 编辑index添加type: “categories” 12345---title: 分类date: 2019-04-24 15:30:30type: categories--- 4.给文章添加分类12345---title: Hexo 添加分类及标签date: 2017-05-26 12:12:57categories: Hexo--- 5.Hexo Admin后台插件12npm install --save hexo-adminhexo server -d(开启hexo操作) 打开http://IP:4000/admin 就可以进入控制台 posts 新建博客 pages 页面 deploy 将更新的博客发布到github 6.提交到git 编辑根目录下_config.yml1234deploy: type: git repo: git@github.com:自己的名称&#x2F;自己的名称.github.io.git branch: master 12hexo g 这一步是生成静态页面hexo d 这个是部署到git上","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}]},{"title":"Docker 部署 Nginx","slug":"Docker-部署-Nginx","date":"2020-03-22T08:08:20.000Z","updated":"2020-03-22T09:43:55.782Z","comments":true,"path":"2020/03/22/Docker-部署-Nginx/","link":"","permalink":"http://yoursite.com/2020/03/22/Docker-%E9%83%A8%E7%BD%B2-Nginx/","excerpt":"","text":"1.安装Nginx镜像1docker pull nginx 2.创建nginx.conf配置文件1234567891011121314151617181920212223242526272829303132333435363738394041worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application&#x2F;octet-stream; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; # Vue路由模式为history需添加的配置 location &#x2F; &#123; if (!-e $request_filename) &#123; rewrite ^(.*)$ &#x2F;index.html?s&#x3D;$1 last; break; &#125; root &#x2F;home&#x2F;nginx&#x2F;www; index index.html; &#125; # 获取真实IP以及Websocket需添加的配置 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; # 客户端Body大小限制（文件上传大小限制配置） client_max_body_size 5m; error_page 500 502 503 504 404 &#x2F;50x.html; location &#x3D; &#x2F;50x.html &#123; root html; &#125; &#125;&#125; 3.创建Nginx容器1234docker run -it -d --name nginx -p 81:80 \\-v &#x2F;home&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \\-v &#x2F;home&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx \\-v &#x2F;home&#x2F;nginx&#x2F;www:&#x2F;home&#x2F;nginx&#x2F;www nginx /home/nginx/conf/nginx.conf 为刚才创建配置文件的路径 /home/nginx/logs 日志保存的位置 /home/nginx/www 跳转静态资源位置 4.其他命令 docker ps | grep nginx 查看nginx容器运行状态 docker start mynginx 启动 docker start mynginx 重启 docker stop mynginx 暂停 docker rm mynginx 移除","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}],"keywords":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}]},{"title":"Nginx 配置详解","slug":"Nginx-简介","date":"2020-03-22T07:40:54.000Z","updated":"2020-03-22T09:44:52.524Z","comments":true,"path":"2020/03/22/Nginx-简介/","link":"","permalink":"http://yoursite.com/2020/03/22/Nginx-%E7%AE%80%E4%BB%8B/","excerpt":"","text":"1.配置概览123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#user nobody;worker_processes 1;#error_log logs&#x2F;error.log;#error_log logs&#x2F;error.log notice;#error_log logs&#x2F;error.log info;#pid logs&#x2F;nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application&#x2F;octet-stream; #log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; # &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; # &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; #access_log logs&#x2F;access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs&#x2F;host.access.log main; location &#x2F; &#123; root html; index index.html index.htm; &#125; #error_page 404 &#x2F;404.html; # redirect server error pages to the static page &#x2F;50x.html # error_page 500 502 503 504 &#x2F;50x.html; location &#x3D; &#x2F;50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http:&#x2F;&#x2F;127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME &#x2F;scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&#39;s document root # concurs with nginx&#39;s one # #location ~ &#x2F;\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location &#x2F; &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location &#x2F; &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; 2.全局快&ensp;&ensp;&ensp;&ensp;从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。 1worker_processes 1; &ensp;&ensp;&ensp;&ensp;这是 Nginx 服务器并发处理服务的关键配置,worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。 3.events块123events &#123; worker_connections 1024;&#125; &ensp;&ensp;&ensp;&ensp;events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。&ensp;&ensp;&ensp;&ensp;上述例子就表示每个 work process 支持的最大连接数为 1024.&ensp;&ensp;&ensp;&ensp;这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。 4.http块12345678910111213http &#123; include mime.types; default_type application&#x2F;octet-stream; sendfile on; server &#123; listen 80; server_name localhost; location &#x2F; &#123; root html; index index.html index.htm; &#125; &#125;&#125; &ensp;&ensp;&ensp;&ensp;这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。&ensp;&ensp;&ensp;&ensp;需要注意的是：http 块也可以包括 http 全局块、server 块。 4.1 http全局快&ensp;&ensp;&ensp;&ensp;http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。 4.2 server块&ensp;&ensp;&ensp;&ensp;这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。 4.2.1全局server块&ensp;&ensp;&ensp;&ensp;最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。 4.2.2 location块&ensp;&ensp;&ensp;&ensp;一个 server 块可以配置多个 location 块。&ensp;&ensp;&ensp;&ensp;这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。","categories":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}],"keywords":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/categories/Nginx/"}]}]}